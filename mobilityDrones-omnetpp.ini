[General]
description = "multiple UAVs hovering"

# Visualizer settings
*.visualizer.osgVisualizer.typename = "IntegratedOsgVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.typename = "SceneOsgEarthVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.mapFile = "map.earth"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImageSize = 10000m
*.visualizer.osgVisualizer.sceneVisualizer.axisLength = 500m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinX = -200m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinY = -200m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinZ = 0m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxX = 5000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxY = 5000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxZ = 5000m


**.wlan[0].radio.displayCommunicationRange = true
#*.visualizer.*.physicalLinkVisualizer.displayLinks = true
#*.visualizer.*.dataLinkVisualizer.displayLinks = true
#*.visualizer.*.networkRouteVisualizer.displayRoutes = true
#*.visualizer.*.*LinkVisualizer.lineShift = 0
#*.visualizer.*.networkRouteVisualizer.lineShift = 0

# network node visualization: disable labels
*.visualizer.osgVisualizer.networkNodeVisualizer.displayModuleName = true

# enable drone load visualization
*.visualizer.*.statisticVisualizer.signalName = "dataLoad"
*.visualizer.*.statisticVisualizer.format = "(%v)"
*.visualizer.*.statisticVisualizer.textColor = "red"
*.visualizer.*.statisticVisualizer.font = "Courier New, 12px, bold"
*.visualizer.*.statisticVisualizer.opacity = 1
*.visualizer.*.statisticVisualizer.sourceFilter = "*.quads[*].** *.groundStation.**"

# mobility visualization
*.visualizer.*.mobilityVisualizer.displayMobility = true # master switch
*.visualizer.*.mobilityVisualizer.displayPositions = true
*.visualizer.*.mobilityVisualizer.displayOrientations = true
*.visualizer.*.mobilityVisualizer.displayVelocities = true
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.mobilityVisualizer.animationSpeed = 10


# mobility constraint area
**.constraintAreaMinX = -5000m
**.constraintAreaMinY = -5000m
**.constraintAreaMinZ = -100m
**.constraintAreaMaxX = 5000m
**.constraintAreaMaxY = 5000m
**.constraintAreaMaxZ = 5000m


# Coordinates of the scene origin on the map
#BSB
#*.coordinateSystem.sceneLatitude = -15.84584deg
#*.coordinateSystem.sceneLongitude = -47.93052deg
#*.coordinateSystem.sceneHeading = 90deg

#PUC
#*.coordinateSystem.sceneLongitude = -43.22260deg
#*.coordinateSystem.sceneLatitude = -22.97556deg
#*.coordinateSystem.sceneHeading = 90deg # scene orientation

#Campo
*.coordinateSystem.sceneLongitude = -47.926634deg
*.coordinateSystem.sceneLatitude = -15.840075deg
*.coordinateSystem.sceneHeading = 90deg # scene orientation

#environment
*.environment.ground.typename = "FlatGround"
*.quads[*].osgModel = "3d/drone.ive.40.scale.0,0,90.rot"
**.mobility.initFromDisplayString = false


*.sensor*.wlan[0].radio.energyConsumer.typename = "SensorStateBasedEpEnergyConsumer"
*.sensor*.wlan[0].radio.energyConsumer.offPowerConsumption = 0mW
*.sensor*.wlan[0].radio.energyConsumer.sleepPowerConsumption = 1mW
*.sensor*.wlan[0].radio.energyConsumer.switchingPowerConsumption = 1mW
*.sensor*.wlan[0].radio.energyConsumer.receiverIdlePowerConsumption = 2mW
*.sensor*.wlan[0].radio.energyConsumer.receiverBusyPowerConsumption = 5mW
*.sensor*.wlan[0].radio.energyConsumer.receiverReceivingPowerConsumption = 10mW
*.sensor*.wlan[0].radio.energyConsumer.transmitterIdlePowerConsumption = 2mW
*.sensor*.wlan[0].radio.energyConsumer.transmitterTransmittingPowerConsumption = 100mW
*.sensor*.energyStorage.typename = "IdealEpEnergyStorage"

*.sensor*.wlan[0].radio.displayInterferenceRange = false


[Config Wifi]
network = mobilityDrones
description = "Config for wifi only communication"

# Quad networking:
*.quads[*].numApps = 1
*.quads[*].app[0].typename = "UdpMobileNodeCommunicationApp"
*.quads[*].app[0].localPort = 1000
*.quads[*].app[0].destPort = 1000
*.quads[*].app[0].sendInterval = 1s
*.quads[*].app[0].startTime =1s
*.quads[*].app[0].stopTime = -1s
*.quads[*].app[0].messageLength = 1454Byte
*.quads[*].protocol.typename = "DadcaProtocol"
*.quads[*].mobility.typename = "DroneMobility"
*.quads[*].mobility.coordinateSystemModule = "coordinateSystem" # Empty if the drone should follow Euclidean coordinates or "coordinateSystem" if it should follow coordinates
*.quads[*].mobility.waypointFile = "paths/voo_ar.waypoints"
*.quads[*].mobility.waypointProximity = 1m
*.quads[*].mobility.speed = 10mps
*.quads[*].mobility.homeLatitude = -15.840068deg
*.quads[*].mobility.homeLongitude = -47.926633deg

# Ground station configs
*.groundStation.mobility.typename = "StationaryMobility"
*.groundStation.mobility.coordinateSystemModule = "coordinateSystem"
*.groundStation.numApps = 1
*.groundStation.app[0].typename = "UdpMobileNodeCommunicationApp"
*.groundStation.app[0].destPort = 1000
*.groundStation.app[0].localPort = 1000
*.groundStation.app[0].sendInterval = 1s
*.groundStation.app[0].messageLength = 1454Byte

*.groundStation.protocol.typename = "DadcaProtocol"
*.groundStation.mobility.initialLatitude = -15.840068deg
*.groundStation.mobility.initialLongitude = -47.926633deg
*.groundStation.mobility.initialAltitude = 0m
*.groundStation.app[0].startTime = 130s

# General sensor and ground station configurations
*.numSensors = 8
*.sensors[*].numApps = 1
*.sensors[*].mobility.typename = "StationaryMobility"  
*.sensors[*].mobility.coordinateSystemModule = "coordinateSystem"
*.sensors[0..2].app[0].typename = "UdpSensorCommunicationApp"
*.sensors[0..2].protocol.typename = "DadcaProtocolSensor"
*.sensors[*].app[0].destPort = 1000
*.sensors[*].app[0].localPort = 1000
*.sensors[*].app[0].sendInterval = 8s
*.sensors[*].app[0].startTime = exponential(1s)
*.sensors[*].app[0].messageLength = 1454Byte
*.sensors[*].mobility.initialAltitude = 0m
*.sensors[0].mobility.initialLatitude = -15.84245230deg
*.sensors[0].mobility.initialLongitude = -47.92948720deg
*.sensors[1].mobility.initialLatitude = -15.84262780deg
*.sensors[1].mobility.initialLongitude = -47.92650460deg
*.sensors[2].mobility.initialLatitude = -15.84161630deg
*.sensors[2].mobility.initialLongitude = -47.92395110deg

*.sensors[3..].app[0].typename = "UdpSensorCommunicationApp"
*.sensors[3].mobility.initialLatitude = -15.8436264deg
*.sensors[3].mobility.initialLongitude = -47.9270250deg
*.sensors[4].mobility.initialLatitude = -15.8406461deg
*.sensors[4].mobility.initialLongitude = -47.9240263deg
*.sensors[5].mobility.initialLatitude = -15.8416370deg
*.sensors[5].mobility.initialLongitude = -47.9227066deg
*.sensors[6].mobility.initialLatitude = -15.8437115deg
*.sensors[6].mobility.initialLongitude = -47.9259145deg
*.sensors[7].mobility.initialLatitude = -15.8437425deg
*.sensors[7].mobility.initialLongitude = -47.9246378deg


[Config MAM]
network = mobilityDronesMAM
description = "Configuration for MAM and Wifi communication"
# radio medium settings
*.radioMedium.analogModel.typename = "DimensionalAnalogModel"
*.radioMedium.backgroundNoise.typename = "IsotropicDimensionalBackgroundNoise"
*.radioMedium.backgroundNoise.powerSpectralDensity = -113dBmWpMHz

# 2452MHz/20MHz bw
*.*.wlan[0].radio.typename = "Ieee80211DimensionalRadio"
*.*.wlan[0].radio.channelNumber = 8
*.*.wlan[0].radio.receiver.snirThresholdMode = "mean"
*.*.wlan[0].radio.receiver.errorModel.snirMode = "mean"

*.*.wlan[0].radio.transmitter.frequencyGains = "left c-b*1.5 -40dB linear c-b -28dB linear c-b*0.5-1MHz -20dB linear c-b*0.5+1MHz 0dB linear c+b*0.5-1MHz 0dB linear c+b*0.5+1MHz -20dB linear c+b -28dB linear c+b*1.5 -40dB right"

# default 2450MHz/2.8MHz bw
*.*.wlan[1].typename = "Ieee802154NarrowbandInterface"
*.*.wlan[1].radio.typename = "Ieee802154NarrowbandDimensionalRadio"
*.*.wlan[1].radio.transmitter.frequencyGains = "left c-5MHz -40dB linear c-2MHz -20dB linear c-1MHz 0dB either c+1MHz 0dB linear c+2MHz -20dB linear c+5MHz -40dB right"
*.*.wlan[1].radio.receiver.snirThresholdMode = "mean"
*.*.wlan[1].radio.receiver.errorModel.snirMode = "mean"

*.sensor*[*].wlan[1].radio.transmitter.power = 0.000275mW # Reducing power to match Bluetooth Low Energy 100m range #TODO: change this for all devices?
*.quads[*].wlan[0].radio.transmitter.power = 0.7mW

#
# drone networking:
#
*.quads[*].numWlanInterfaces = 2
*.quads[*].wlan[1].typename = "BleMeshNarrowbandInterface"
*.quads[*].wlan[1].radio.transmitter.power = 0.000275mW # Reducing power to match Bluetooth Low Energy 100m range

#
# sensor networking:
#
*.sensor*[*].wlan[1].typename = "BleMeshNarrowbandInterface"
*.sensor*[*].numWlanInterfaces = 2

#
# ipv4 settings
#
*.sensor*[*].ipv4.arp.typename = "GlobalArp"
*.quads[*].ipv4.arp.typename = "GlobalArp"
*.groundStation.ipv4.arp.typename = "GlobalArp"

*.sensor*[*].ipv4.ip.directBroadcastInterfaces = "wlan0,wlan1"
*.quads[*].ipv4.ip.directBroadcastInterfaces = "wlan0,wlan1"
*.groundStation.ipv4.ip.directBroadcastInterfaces = "wlan0,wlan1"

*.sensor*[*].ipv4.ip.limitedBroadcast = true
*.quads[*].ipv4.ip.limitedBroadcast = true
*.groundStation.ipv4.ip.limitedBroadcast = true

#
# BTM-R / MAM settings
#
*.sensors_rly[*].app[0].relayNode = true
*.sensors[*].app[0].relayMode = "BMesh"

*.sensors_lpn[*].wlan[1].mac.lowPowerNode = true
*.sensors_lpn[*].app[1].lowPowerNode = true
*.sensors_fn[*].app[1].friendNode = true

# network node visualization: disable labels
*.visualizer.osgVisualizer.networkNodeVisualizer.displayModuleName = true

#
# Energy settings
#
*.sensor*.wlan[0].radio.energyConsumer.typename = "SensorStateBasedEpEnergyConsumer"
*.sensor*.wlan[0].radio.energyConsumer.offPowerConsumption = 0mW
*.sensor*.wlan[0].radio.energyConsumer.sleepPowerConsumption = 1mW
*.sensor*.wlan[0].radio.energyConsumer.switchingPowerConsumption = 1mW
*.sensor*.wlan[0].radio.energyConsumer.receiverIdlePowerConsumption = 2mW
*.sensor*.wlan[0].radio.energyConsumer.receiverBusyPowerConsumption = 5mW
*.sensor*.wlan[0].radio.energyConsumer.receiverReceivingPowerConsumption = 10mW
*.sensor*.wlan[0].radio.energyConsumer.transmitterIdlePowerConsumption = 2mW
*.sensor*.wlan[0].radio.energyConsumer.transmitterTransmittingPowerConsumption = 100mW

*.sensor*.energyStorage.typename = "IdealEpEnergyStorage"

#
# drone applications
#
*.quads[*].numApps = 2
*.quads[*].app[0].typename = "UdpMobileNodeCommunicationApp"
*.quads[*].app[0].localPort = 1000
*.quads[*].app[0].destPort = 1000
*.quads[*].app[0].sendInterval = 1s
*.quads[*].app[0].startTime =1s
*.quads[*].app[0].stopTime = -1s
*.quads[*].app[0].messageLength = 1454Byte
*.quads[*].app[0].packetName = "UAV-DEFAULT-PAYLOAD" #packetName is used as a default payload

*.quads[*].app[1].typename = "MamDataCollectorApp"
*.quads[*].app[1].localPort = 5000
*.quads[*].app[1].destPort = 5000

*.quads[*].protocol.typename = "DadcaProtocol"

*.quads[*].mobility.typename = "DroneMobility"
*.quads[*].mobility.coordinateSystemModule = "coordinateSystem" # Empty if the drone should follow Euclidean coordinates or "coordinateSystem" if it should follow coordinates
*.quads[*].mobility.waypointFile = "paths/voo_ar.waypoints"
*.quads[*].mobility.waypointProximity = 1m
*.quads[*].mobility.speed = 10mps
*.quads[*].mobility.homeLatitude = -15.840068deg
*.quads[*].mobility.homeLongitude = -47.926633deg

# Ground station configs
*.groundStation.mobility.typename = "StationaryMobility"
*.groundStation.mobility.coordinateSystemModule = "coordinateSystem"
*.groundStation.numApps = 1
*.groundStation.app[0].typename = "UdpMobileNodeCommunicationApp"
*.groundStation.app[0].destPort = 1000
*.groundStation.app[0].localPort = 1000
*.groundStation.app[0].sendInterval = 1s
*.groundStation.app[0].messageLength = 1454Byte

*.groundStation.protocol.typename = "DadcaProtocol"
*.groundStation.mobility.initialLatitude = -15.840068deg
*.groundStation.mobility.initialLongitude = -47.926633deg
*.groundStation.mobility.initialAltitude = 0m
*.groundStation.app[0].startTime = 130s

# General sensor and ground station configurations
*.numSensors = 8
*.sensors[*].numApps = 1
*.sensors*[*].mobility.typename = "StationaryMobility"  
*.sensors*[*].mobility.coordinateSystemModule = "coordinateSystem"
*.sensors*[*].mobility.initialAltitude = 0m

*.sensors[0].mobility.initialLatitude = -15.84245230deg
*.sensors[0].mobility.initialLongitude = -47.92948720deg
*.sensors[1].mobility.initialLatitude = -15.84262780deg
*.sensors[1].mobility.initialLongitude = -47.92650460deg
*.sensors[2].mobility.initialLatitude = -15.84161630deg
*.sensors[2].mobility.initialLongitude = -47.92395110deg
*.sensors[3].mobility.initialLatitude = -15.8436264deg
*.sensors[3].mobility.initialLongitude = -47.9270250deg
*.sensors[4].mobility.initialLatitude = -15.8406461deg
*.sensors[4].mobility.initialLongitude = -47.9240263deg
*.sensors[5].mobility.initialLatitude = -15.8416370deg
*.sensors[5].mobility.initialLongitude = -47.9227066deg
*.sensors[6].mobility.initialLatitude = -15.8437115deg
*.sensors[6].mobility.initialLongitude = -47.9259145deg
*.sensors[7].mobility.initialLatitude = -15.8437425deg
*.sensors[7].mobility.initialLongitude = -47.9246378deg

*.sensors_rly[0].mobility.initialLatitude = -15.8436244deg
*.sensors_rly[0].mobility.initialLongitude = -47.9270250deg
*.sensors_rly[1].mobility.initialLatitude = -15.8406441deg
*.sensors_rly[1].mobility.initialLongitude = -47.9240263deg
*.sensors_rly[2].mobility.initialLatitude = -15.843695deg
*.sensors_rly[2].mobility.initialLongitude = -47.9259145deg
#
# sensor application
#
*.sensors*[*].numApps = 1
*.sensors*[*].app[0].typename = "MamNodeApp"
*.sensors*[*].app[0].destAddresses = "quads[0]"
*.sensors*[*].app[0].localPort = 5000
*.sensors*[*].app[0].destPort = 5000
*.sensors*[*].app[0].messageLength = 1000B
*.sensors*[*].app[0].sendInterval = exponential(12ms)
*.sensors*[*].app[0].packetName = "UDPData"
*.sensors*[*].app[0].delta = 0
*.sensors_rly[0].mobility.initialLatitude = -15.8436244deg
*.sensors_rly[0].mobility.initialLongitude = -47.9270250deg
*.sensors_rly[1].mobility.initialLatitude = -15.8406441deg
*.sensors_rly[1].mobility.initialLongitude = -47.9240263deg
*.sensors_rly[2].mobility.initialLatitude = -15.843695deg
*.sensors_rly[2].mobility.initialLongitude = -47.9259145deg

[Config NewMap]
*.numSensors = 10
*.quads[*].mobility.speed = 5mps
*.quads[*].mobility.homeLatitude = -15.8404568deg
*.quads[*].mobility.homeLongitude = -47.926633deg
*.quads[*].protocol.typename = "SimpleDroneProtocol"
*.quads[*].protocol.timeoutDuration = 1s
*.quads[*].app[0].sendInterval = 1s
*.quads[*].app[0].destAddresses = "sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] sensors[6] sensors[7] sensors[8] sensors[9]"
*.quads[*].numFailures = 1
*.quads[*].failures[0].typename="SimpleTimerEnergy"
*.quads[*].failures[0].batteryShutdownDuration = 30min
*.quads[*].failures[0].batteryRTLDuration = 25min
*.quads[*].failures[0].rechargeDuration = -1s

#*.radioMedium.typename = "UnitDiskRadioMedium"
#*.radioMedium.pathLoss.typename = "TwoRayNewModel"
#**.wlan[0].radio.typename = "Ieee80211UnitDiskRadio"
#**.wlan[0].radio.transmitter.communicationRange = 60m
**.wlan[0].radio.transmitter.power = 3mW

*.sensors[*].protocol.typename = "SimpleSensorProtocol"
*.sensors[*].protocol.payloadSize = 1
*.sensors[*].app[0].destAddresses = "quads[0]"
*.sensors[0].mobility.initialLatitude = -15.839695565862263deg
*.sensors[0].mobility.initialLongitude=-47.926282323896885deg 
*.sensors[1].mobility.initialLatitude = -15.839025637959622deg 
*.sensors[1].mobility.initialLongitude=-47.926336638629444deg 
*.sensors[2].mobility.initialLatitude = -15.839130465534483deg 
*.sensors[2].mobility.initialLongitude=-47.92686972767115deg 
*.sensors[3].mobility.initialLatitude = -15.839286255337507deg
*.sensors[3].mobility.initialLongitude= -47.92742360383273deg
*.sensors[4].mobility.initialLatitude = -15.839474622143825deg
*.sensors[4].mobility.initialLongitude=-47.92789801955223deg
*.sensors[5].mobility.initialLatitude = -15.839765558201474deg
*.sensors[5].mobility.initialLongitude=-47.92838953435421deg
*.sensors[6].mobility.initialLatitude = -15.839229809770595deg
*.sensors[6].mobility.initialLongitude=-47.9285541549325deg
*.sensors[7].mobility.initialLatitude = -15.838679545303021deg
*.sensors[7].mobility.initialLongitude=-47.92844519019127deg
*.sensors[8].mobility.initialLatitude = -15.838461825946736deg
*.sensors[8].mobility.initialLongitude=-47.927931882441044deg
*.sensors[9].mobility.initialLatitude = -15.838123150926deg
*.sensors[9].mobility.initialLongitude=-47.927566766738884deg

*.groundStation.protocol.typename = "CommunicationProtocolBase"
# Placing groundStation way out of the map
*.groundStation.mobility.initialLatitude = -15.845695565862263deg
*.groundStation.mobility.initialLongitude = -47.926282323896885deg 
*.groundStation.mobility.initialAltitude = 0m


[Config Sim1drone-Wifi-NewMap-20]
extends = NewMap, Wifi
description="Simulation with one drone with wifi radio only"
*.numUAVs = 1
*.quads[*].mobility.waypointFile = "paths/voo_mapa_novo20.waypoints"

[Config Sim1drone-Wifi-NewMap-35]
extends = NewMap, Wifi
description="Simulation with one drone with wifi radio only"
*.numUAVs = 1
*.quads[*].mobility.waypointFile = "paths/voo_mapa_novo35.waypoints"

[Config Sim1drone-Wifi-NewMap-50]
extends = NewMap, Wifi
description="Simulation with one drone with wifi radio only"
*.numUAVs = 1
*.quads[*].mobility.waypointFile = "paths/voo_mapa_novo50.waypoints"

[Config Sim1drone-Wifi]
extends = Wifi
description="Simulation with one drone with wifi radio only"
*.numUAVs = 1
*.quads[0].app[0].destAddresses = "sensors[0] sensors[1] sensors[2] groundStation"
*.quads[*].app[*].timeoutDuration = 10s
*.quads[0].mobility.startTime = 0s
*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[0].numFailures = 1
*.quads[0].failures[0].typename="SimpleConsumptionEnergy"
*.quads[0].failures[0].batteryCapacity = 3000mAh
*.quads[0].failures[0].batteryConsumption = 1.5A
*.quads[0].failures[0].batteryRTLThreshold = 235mAh
*.quads[0].failures[0].rechargeDuration = 25s

*.sensors[*].app[0].destAddresses = "quads[0]"

*.groundStation.app[0].destAddresses = "quads[0]"

[Config Sim2drone-Wifi]
extends=Wifi
description="Simulation with two drones with wifi radio only"
*.numUAVs = 2
*.quads[0].app[0].destAddresses = "quads[1] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[1].app[0].destAddresses = "quads[0] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[*].protocol.timeoutDuration = 20s
*.quads[0].mobility.startTime = 0s
*.quads[1].mobility.startTime = 40s
*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[1].app[*].startTime = normal(40s, 1s)

*.sensors[*].app[0].destAddresses = "quads[0] quads[1]"

*.groundStation.app[0].destAddresses = "quads[0] quads[1]"

[Config Sim3drone-Wifi]
extends=Wifi
description="Simulation with three drones with wifi radio only"
*.numUAVs = 3
*.quads[0].app[0].destAddresses = "quads[1] quads[2] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[1].app[0].destAddresses = "quads[0] quads[2] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[2].app[0].destAddresses = "quads[0] quads[1] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[*].protocol.timeoutDuration = 20s
*.quads[0].mobility.startTime = 0s
*.quads[1].mobility.startTime = 40s
*.quads[2].mobility.startTime = 80s
*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[1].app[*].startTime = normal(40s, 1s)
*.quads[2].app[*].startTime = normal(80s, 1s)
*.quads[0].numFailures = 1
*.quads[*].failures[0].typename = "RandomFailureGenerator"
*.quads[*].failures[0].failureStart = 5s
*.quads[*].failures[0].failureMinimumInterval = 10s
*.quads[*].failures[0].failureRollTime = 1s
*.quads[*].failures[0].failureChance = 0.01
*.quads[*].failures[0].failureDuration = 1min

*.sensors[*].app[0].destAddresses = "quads[0] quads[1] quads[2]"

*.groundStation.app[0].destAddresses = "quads[0] quads[1] quads[2]"

[Config Sim4drone-Wifi]
extends=Wifi
description="Simulation with four drones with wifi radio only" 
*.numUAVs = 4
*.quads[0].app[0].destAddresses = "quads[1] quads[2] quads[3] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[1].app[0].destAddresses = "quads[0] quads[2] quads[3] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[2].app[0].destAddresses = "quads[0] quads[1] quads[3] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[3].app[0].destAddresses = "quads[0] quads[1] quads[2] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[*].protocol.timeoutDuration = 20s
*.quads[0].mobility.startTime = 0s
*.quads[1].mobility.startTime = 40s
*.quads[2].mobility.startTime = 80s
*.quads[3].mobility.startTime = 110s
*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[1].app[*].startTime = normal(40s, 1s)
*.quads[2].app[*].startTime = normal(80s, 1s)
*.quads[3].app[*].startTime = normal(110s, 1s)

*.sensors[*].app[0].destAddresses = "quads[0] quads[1] quads[2] quads[3]"

*.groundStation.app[0].destAddresses = "quads[0] quads[1] quads[2] quads[3]"

[Config Sim1drone-MAM]
extends=MAM
description="Simulation with one drone with wifi and MAM radios"
*.numUAVs = 1
*.quads[0].app[0].destAddresses = "sensors[0] groundStation"
*.quads[*].app[*].timeoutDuration = 10s
*.quads[0].mobility.startTime = 0s
*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[0].numFailures = 2
*.quads[0].failures[0].typename="SimpleConsumptionEnergy"
*.quads[0].failures[0].batteryCapacity = 500mAh
*.quads[0].failures[0].batteryRTLThreshold = 450mAh
*.quads[0].failures[0].batteryConsumption = 1.5A
*.quads[0].failures[1].typename="RandomFailureGenerator"
*.quads[0].failures[1].failureChance = 0.2

*.groundStation.app[0].destAddresses = "quads[0]"

[Config Sim2drone-MAM]
extends=MAM
description="Simulation with two drones with wifi and MAM radios"
*.numUAVs = 2
*.quads[0].app[0].destAddresses = "quads[1] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[1].app[0].destAddresses = "quads[0] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[*].protocol.timeoutDuration = 20s
*.quads[0].mobility.startTime = 0s
*.quads[1].mobility.startTime = 40s
*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[1].app[*].startTime = normal(40s, 1s)

*.groundStation.app[0].destAddresses = "quads[0] quads[1]"

[Config Sim3drone-MAM]
extends=MAM
description="Simulation with three drones with wifi and MAM radios"
*.numUAVs = 3
*.quads[0].app[0].destAddresses = "quads[1] quads[2] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[1].app[0].destAddresses = "quads[0] quads[2] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[2].app[0].destAddresses = "quads[0] quads[1] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[*].protocol.timeoutDuration = 20s
*.quads[0].mobility.startTime = 0s
*.quads[1].mobility.startTime = 40s
*.quads[2].mobility.startTime = 80s
*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[1].app[*].startTime = normal(40s, 1s)
*.quads[2].app[*].startTime = normal(80s, 1s)

*.groundStation.app[0].destAddresses = "quads[0] quads[1] quads[2]"

[Config Sim4drone-MAM]
extends=MAM
description="Simulation with four drones with wifi and MAM radios"
*.numUAVs = 4
*.quads[0].app[0].destAddresses = "quads[1] quads[2] quads[3] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[1].app[0].destAddresses = "quads[0] quads[2] quads[3] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[2].app[0].destAddresses = "quads[0] quads[1] quads[3] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[3].app[0].destAddresses = "quads[0] quads[1] quads[2] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[*].protocol.timeoutDuration = 20s
*.quads[0].mobility.startTime = 0s
*.quads[1].mobility.startTime = 40s
*.quads[2].mobility.startTime = 80s
*.quads[3].mobility.startTime = 110s
*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[1].app[*].startTime = normal(40s, 1s)
*.quads[2].app[*].startTime = normal(80s, 1s)
*.quads[3].app[*].startTime = normal(110s, 1s)

*.groundStation.app[0].destAddresses = "quads[0] quads[1] quads[2] quads[3]"

[Config Simple]
extends = Wifi 
# Sets the description of the launch configuration.
# Shown when you launch a simulation and are prompted to select the correct launch configuration.
description = "simple protocol configuration"
# UAV Configurations
# This parameter is declared in the mobilityDrones.ned network and defines the number of UAVs
# in the simulation.
*.numUAVs = 2

# Apps are user implemented modules that extend the behaviour of INET communication modules.
# In this case our app will be the communication part of our three part solution.
*.quads[*].numApps = 1

# The communbication module automatically filters messages from nodes that are not included in the
# destAddresses parameter. Be careful not to set the node as a destination address to itself.
*.quads[0].app[0].destAddresses = "quads[1] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[1].app[0].destAddresses = "quads[0] sensors[0] sensors[1] sensors[2] groundStation"

# The waypointFile parameter is declared in DroneMobility.ned and specifies the waypoint list
# the drones will follow.
*.quads[0].mobility.waypointFile = "paths/voo_sensor1.waypoints"
*.quads[1].mobility.waypointFile = "paths/voo_sensor2.waypoints"

# The typename parameter of the protocol specifies the filename of the protocol implementation
# the protocol module will use.
*.quads[*].protocol.typename = "SimpleDroneProtocol"

# The normal() function gives us a value within 1s of 1s. This is used instead of a fixed value
# because if both the quads communication apps started at 1s and had the same interval between
# messages (defined by the .sendInterval parameter) they would be forever syncronized and their
# messages would always interfere with each other in the medium.
*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[1].app[*].startTime = normal(1s, 1s)

# Sensor configurations
*.sensors[*].app[*].destAddresses = "quads[0] quads[1]"
*.sensors[0..2].protocol.typename = "SimpleSensorProtocol"

# Groundstation configurations
# Setting the ground station as a sensor because it is a passive listener in this config
*.groundStation.app[0].typename = "UdpSensorCommunicationApp"
*.groundStation.app[*].destAddresses = "quads[0] quads[1]"
*.groundStation.protocol.typename = "SimpleGroundProtocol"
*.groundStation.app[0].startTime = 0s


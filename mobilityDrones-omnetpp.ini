[General]
description = "multiple UAVs hovering"
network = mobilityDrones

# Visualizer settings
*.visualizer.osgVisualizer.typename = "IntegratedOsgVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.typename = "SceneOsgEarthVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.mapFile = "map.earth"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImageSize = 10000m
*.visualizer.osgVisualizer.sceneVisualizer.axisLength = 500m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinX = -200m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinY = -200m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinZ = 0m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxX = 5000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxY = 5000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxZ = 5000m

# network node visualization: disable labels
*.visualizer.osgVisualizer.networkNodeVisualizer.displayModuleName = true

# mobility visualization
*.visualizer.*.mobilityVisualizer.displayMobility = true # master switch
*.visualizer.*.mobilityVisualizer.displayPositions = true
*.visualizer.*.mobilityVisualizer.displayOrientations = true
*.visualizer.*.mobilityVisualizer.displayVelocities = true
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.mobilityVisualizer.animationSpeed = 10

*.visualizer.mediumVisualizer.displaySignals = true

# mobility constraint area
**.constraintAreaMinX = -5000m
**.constraintAreaMinY = -5000m
**.constraintAreaMinZ = -100m
**.constraintAreaMaxX = 5000m
**.constraintAreaMaxY = 5000m
**.constraintAreaMaxZ = 5000m
# original from 2D: **.updateInterval = 0.1s # test with 0s too, and let getCurrentPosition update the display string from a test module

*.drones*.wlan[0].radio.displayCommunicationRange = true

# Coordinates of the scene origin on the map
#BSB
#*.coordinateSystem.sceneLatitude = -15.84584deg
#*.coordinateSystem.sceneLongitude = -47.93052deg
#*.coordinateSystem.sceneHeading = 90deg

#PUC
#*.coordinateSystem.sceneLongitude = -43.22260deg
#*.coordinateSystem.sceneLatitude = -22.97556deg
#*.coordinateSystem.sceneHeading = 90deg # scene orientation

#Campo
*.coordinateSystem.sceneLongitude = -47.926634deg
*.coordinateSystem.sceneLatitude = -15.840075deg
*.coordinateSystem.sceneHeading = 90deg # scene orientation

#environment
*.environment.ground.typename = "FlatGround"
#*.numUAVs = 2
*.drones[*].osgModel = "3d/drone.ive.80.scale.0,0,90.rot"
#*.drones[*].mobility.typename = "DroneMobility" 
*.drones[*].mobility.coordinateSystemModule = "coordinateSystem" # Empty if the drone should follow Euclidean coordinates or "coordinateSystem" if it should follow coordinates
*.drones[*].mobility.waypointFile = "paths/gradys-vai-e-volta-descendo-5s-v1.txt"
*.drones[*].mobility.waypointProximity = 1m
**.mobility.initFromDisplayString = false
# Node position settings
#*.drones[0].mobility.initialX = 30m
#*.drones[0].mobility.initialY = 30m
#*.drones[0].mobility.initialZ = 0m
#**.updateInterval = 0.1s # test with 0s too, and let getCurrentPosition update the display string from a test module
#*.host[*].mobility.changeInterval = 1s
#*.host[*].mobility.initialMovementHeading = uniform(0deg, 360deg)
#*.host[*].mobility.initialMovementElevation = uniform(-90deg, 90deg)
#*.host[*].mobility.angleDelta = uniform(-10deg,10deg)
#*.host[*].mobility.rotationAxisAngle = uniform(-10deg,10deg)
*.drones[*].mobility.speed = 10mps
#*.host[*].mobility.faceForward = false
#**.constraintAreaMinZ = 0m


# drone networking:

*.drones[*].numApps = 2
*.drones[*].app[0].typename = "UdpBasicAppMobileNode"
#*.drones[*].app[0].destAddresses = "sensor1"
*.drones[*].app[0].destPort = 1000
*.drones[*].app[0].sendInterval = exponential(0.5s)
*.drones[*].app[0].startTime =1s
*.drones[*].app[0].stopTime = -1s
*.drones[*].app[0].messageLength = 1454Byte
*.drones[*].app[0].packetName = "UAV-DEFAULT-PAYLOAD" #packetName is used as a default payload
#
*.drones[*].app[1].typename = "UdpSinkMobileNode"
*.drones[*].app[1].localPort = 1000

# Node position settings
#*.sensor.osgModel = "3d/drone.ive.100.scale.0,0,90.rot"
*.sensor.mobility.typename = "StationaryMobility"  
*.sensor*.mobility.coordinateSystemModule = ""


#*.sensor*.numApps = 2
#*.sensor*.app[0].typename = "UdpBasicAppMobileSensorNode"
##*.sensor*.app[0].destAddresses = "drones[0] drones[1]"
#*.sensor*.app[0].destPort = 1000
#*.sensor*.app[0].sendInterval = 0.1s
#*.sensor*.app[0].startTime = 1s #exponential(1s)
#*.sensor*.app[0].messageLength = 1454Byte
#*.sensor*.app[0].packetName = "SENSOR-DEFAULT-PAYLOAD" #packetName is used as a default payload
#
#*.sensor*.app[1].typename = "UdpSinkMobileSensorNode"
#*.sensor*.app[1].localPort = 1000

[Config Sim1drone1sensor]
*.numUAVs = 1
*.drones[*].app[0].destAddresses = ""

#*.sensor*.app[0].destAddresses = "drones[0]"
#*.sensor1.mobility.initialX = 0m
#*.sensor1.mobility.initialY = 100m
#*.sensor1.mobility.initialZ = 0m

[Config Sim2drone1sensor]
*.numUAVs = 2
*.drones[0].app[0].destAddresses = "drones[1]"
*.drones[1].app[0].destAddresses = "drones[0]"
*.drones[0].mobility.waypointFile = "paths/testPath.csv"
*.drones[1].mobility.waypointFile = "paths/testPath2.csv"

#*.sensor*.app[0].destAddresses = "drones[0] drones[1]"
#*.sensor1.mobility.initialX = 450m
#*.sensor1.mobility.initialY = 450m
#*.sensor1.mobility.initialZ = 0m

[Config Sim2drone3sensor]
*.numUAVs = 2
*.drones[*].app[0].destAddresses = "sensor1 sensor2 sensor3"
*.drones[0].mobility.waypointFile = "testPath.csv"
*.drones[1].mobility.waypointFile = "testPath2.csv"
*.drones[2].mobility.waypointFile = "testPath2.csv"

*.sensor*.app[0].destAddresses = "drones[0] drones[1]"
*.sensor1.mobility.initialX = 450m
*.sensor1.mobility.initialY = 450m
*.sensor1.mobility.initialZ = 0m

*.sensor2.mobility.initialX = 250m
*.sensor2.mobility.initialY = 550m
*.sensor2.mobility.initialZ = 0m


*.sensor3.mobility.initialX = 550m
*.sensor3.mobility.initialY = 250m
*.sensor3.mobility.initialZ = 0m

[Config Sim4drone]
*.numUAVs = 4
*.drones[0].app[0].destAddresses = "drones[1] drones[2] drones[3]"
*.drones[1].app[0].destAddresses = "drones[0] drones[2] drones[3]"
*.drones[2].app[0].destAddresses = "drones[0] drones[1] drones[3]"
*.drones[3].app[0].destAddresses = "drones[0] drones[1] drones[2]"
*.drones[*].mobility.waypointFile = "paths/mission.txt"
*.drones[*].mobility.instructionTimeout = 5s
*.drones[0].mobility.startTime = 0s
*.drones[1].mobility.startTime = 40s
*.drones[2].mobility.startTime = 80s
*.drones[3].mobility.startTime = 110s
*.drones[0].app[*].startTime = 0s
*.drones[1].app[*].startTime = 40s
*.drones[2].app[*].startTime = 80s
*.drones[3].app[*].startTime = 110s




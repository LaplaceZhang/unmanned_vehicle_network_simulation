//
// Generated file, do not edit! Created by nedtool 5.6 from communication/Telemetry.msg.
//

#ifndef __PROJETO_TELEMETRY_M_H
#define __PROJETO_TELEMETRY_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace projeto {

class Telemetry;
} // namespace projeto


namespace projeto {

/**
 * Class generated from <tt>communication/Telemetry.msg:19</tt> by nedtool.
 * <pre>
 * // Class designed to share necessary drone information with the communication module
 * message Telemetry
 * {
 *     int nextWaypointID;
 *     int lastWaypointID;
 *     bool isReversed;
 * }
 * </pre>
 */
class Telemetry : public ::omnetpp::cMessage
{
  protected:
    int nextWaypointID = 0;
    int lastWaypointID = 0;
    bool isReversed_ = false;

  private:
    void copy(const Telemetry& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Telemetry&);

  public:
    Telemetry(const char *name=nullptr, short kind=0);
    Telemetry(const Telemetry& other);
    virtual ~Telemetry();
    Telemetry& operator=(const Telemetry& other);
    virtual Telemetry *dup() const override {return new Telemetry(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getNextWaypointID() const;
    virtual void setNextWaypointID(int nextWaypointID);
    virtual int getLastWaypointID() const;
    virtual void setLastWaypointID(int lastWaypointID);
    virtual bool isReversed() const;
    virtual void setIsReversed(bool isReversed);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Telemetry& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Telemetry& obj) {obj.parsimUnpack(b);}

} // namespace projeto

#endif // ifndef __PROJETO_TELEMETRY_M_H

